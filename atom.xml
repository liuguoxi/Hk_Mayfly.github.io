<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hk_Mayfly的博客</title>
  
  <subtitle>Welcome!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T11:01:46.173Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hk_Mayfly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/03/27/Test-Blog2/"/>
    <id>http://yoursite.com/2019/03/27/Test-Blog2/</id>
    <published>2019-03-27T10:35:04.637Z</published>
    <updated>2019-03-27T11:01:46.173Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>一个机器人位于一个&nbsp;<em>m x n&nbsp;</em>网格的左上角 （起始点在下图中标记为&ldquo;Start&rdquo; ）。</p><p></p><p></p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为&ldquo;Finish&rdquo;）。</p><p></p><p></p><p>问总共有多少条不同的路径？</p><p></p><p></p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190321154712828-402330827.png" alt></p><p></p><p></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png" alt></p><p></p><p></p><p><small>例如，上图是一个7 x 3 的网格。有多少可能的路径？</small></p><p></p><p></p><p>说明：<em>m</em>&nbsp;和&nbsp;<em>n&nbsp;</em>的值均不超过 100。</p><p></p><p></p><p>示例&nbsp;1:</p><p></p><p><pre>输入: m = 3, n = 2<br>输出: 3<br>解释:<br>从左上角开始，总共有 3 条路径可以到达右下角。</pre></p><ol><li>向右 -&gt; 向右 -&gt; 向下</li><li>向右 -&gt; 向下 -&gt; 向右</li><li>向下 -&gt; 向右 -&gt; 向右<br>&lt;/pre&gt;<br><p>示例&nbsp;2:</p><br><pre>输入: m = 7, n = 3输出: 28</pre><br><pre><br>可以观察规律，矩阵中数字表示起点到这个地方有多少条路。</pre><br><table style="height: 97px; width: 353px;" border="0"><tbody><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>1</td><td>3</td><td>6</td><td>10</td><td>15</td></tr></tbody></table><br><pre><br>发现坐标(i,j)路的条数，可以通过关系式：<span style="color: #ff0000;"><strong>way[i][j] = way[i - 1][j] + way[i][j - 1];</strong></span>计算<span style="color: #ff0000;"><strong><br></strong></span></pre><br><div class="cnblogs_code"><br><pre>#include &lt;iostream&gt;<span style="color: #ecf3e9;"><h1 id="include-lt-span-gt-lt-vector-gt"><a href="#include-lt-span-gt-lt-vector-gt" class="headerlink" title="include &lt;/span&gt;&lt;vector&gt;"></a>include &lt;/span&gt;&lt;vector&gt;<span style="color: #ecf3e9;"></span></h1><h1 id="include-lt-span-gt-lt-algorithm-gt"><a href="#include-lt-span-gt-lt-algorithm-gt" class="headerlink" title="include &lt;/span&gt;&lt;algorithm&gt;"></a>include &lt;/span&gt;&lt;algorithm&gt;<span style="color: #ecf3e9;"></span></h1><h1 id="include-lt-span-gt-lt-memory-gt"><a href="#include-lt-span-gt-lt-memory-gt" class="headerlink" title="include &lt;/span&gt;&lt;memory&gt;"></a>include &lt;/span&gt;&lt;memory&gt;<span style="color: #ecf3e9;"></span></h1><h1 id="include-lt-span-gt-lt-numeric-gt"><a href="#include-lt-span-gt-lt-numeric-gt" class="headerlink" title="include &lt;/span&gt;&lt;numeric&gt;"></a>include &lt;/span&gt;&lt;numeric&gt;</h1></span></pre></div></li></ol><p><span style="color: #d0e0e3;">using</span> <span style="color: #d0e0e3;">namespace</span><span style="color: #ecf3e9;"> std;</span></p><p>&lt;/span&gt;<span style="color: #d0e0e3;">static</span> <span style="color: #d0e0e3;">int</span> x = <a href></a> {std::ios::sync_with_stdio(<span style="color: #d0e0e3;">false</span>); cin.tie(<span style="color: #d9ead3;">0</span>); <span style="color: #d0e0e3;">return</span> <span style="color: #d9ead3;">0</span><span style="color: #ecf3e9;">; }();</span></p><p>&lt;/span&gt;<span style="color: #d0e0e3;">class</span><span style="color: #ecf3e9;"> Solution {</span><span style="color: #d0e0e3;">public</span><span style="color: #ecf3e9;">:    </span><span style="color: #d0e0e3;">int</span> uniquePaths(<span style="color: #d0e0e3;">int</span> m, <span style="color: #d0e0e3;">int</span><span style="color: #ecf3e9;"> n) {<br>        vector</span>&lt;vector&lt;<span style="color: #d0e0e3;">int</span>&gt; &gt; way(m, vector&lt;<span style="color: #d0e0e3;">int</span>&gt;(n, <span style="color: #d9ead3;">1</span><span style="color: #ecf3e9;">));</span></p><pre><code>    &lt;/span&gt;&lt;span style=&quot;color: #d0e0e3;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #d0e0e3;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #d9ead3;&quot;&gt;1&lt;/span&gt;; i &amp;lt; m; ++&lt;span style=&quot;color: #ecf3e9;&quot;&gt;i) {        &lt;/span&gt;&lt;span style=&quot;color: #d0e0e3;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #d0e0e3;&quot;&gt;int&lt;/span&gt; j = &lt;span style=&quot;color: #d9ead3;&quot;&gt;1&lt;/span&gt;; j &amp;lt; n; ++&lt;span style=&quot;color: #ecf3e9;&quot;&gt;j) {            way[i][j] &lt;/span&gt;= way[i - &lt;span style=&quot;color: #d9ead3;&quot;&gt;1&lt;/span&gt;][j] + way[i][j - &lt;span style=&quot;color: #d9ead3;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #ecf3e9;&quot;&gt;];        }    }    &lt;/span&gt;&lt;span style=&quot;color: #d0e0e3;&quot;&gt;return&lt;/span&gt; way[m - &lt;span style=&quot;color: #d9ead3;&quot;&gt;1&lt;/span&gt;][n - &lt;span style=&quot;color: #d9ead3;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #ecf3e9;&quot;&gt;];}</code></pre><p>};</p><p>&lt;/span&gt;<span style="color: #d0e0e3;">int</span><span style="color: #ecf3e9;"> main()<br>{<br>    Solution A;    </span><span style="color: #d0e0e3;">int</span> m = <span style="color: #d9ead3;">7</span>, n = <span style="color: #d9ead3;">3</span><span style="color: #ecf3e9;">;</span></p><pre><code>cout &lt;/span&gt;&amp;lt;&amp;lt;&lt;span style=&quot;color: #ecf3e9;&quot;&gt; A.uniquePaths(m, n);system(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;PAUSE&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ecf3e9;&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;color: #d0e0e3;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #d9ead3;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #ecf3e9;&quot;&gt;;</code></pre><p>}&lt;/span&gt;&lt;/pre&gt;<br>&lt;/div&gt;</p><p></p><p>&nbsp;</p><p></p><p></p><p>注意：memset()是按字节赋值，只能够赋值-1或0。</p><p></p><p></p><p>当我们赋值1时，1转换为二进制00000001，占1字节，int型为4字节，因此实际上赋值的是：0000 0001,0000 0001,0000 0001,0000 0001</p><p></p><p></p><p><span style="color: #ecf3e9;">也就是16843009</span></p><p></p><p></p><p>&nbsp;</p><p></p><p></p><p>&nbsp;</p><p></p><div class="cnblogs_code"><pre><span style="color: #d0e0e3;">int</span> ptr** = <span style="color: #d0e0e3;">new</span> <span style="color: #d0e0e3;">int</span>*<span style="color: #ecf3e9;">[m];</span><span style="color: #d0e0e3;">for</span>(<span style="color: #d0e0e3;">int</span> i = <span style="color: #d9ead3;">0</span>; i &lt; m; ++<span style="color: #ecf3e9;">i){    ptr[m] </span>= <span style="color: #d0e0e3;">new</span> <span style="color: #d0e0e3;">int</span><span style="color: #ecf3e9;">[n];}....</span><span style="color: #d0e0e3;">for</span>(<span style="color: #d0e0e3;">int</span> i = <span style="color: #d9ead3;">0</span>; i &lt; m;++<span style="color: #ecf3e9;">i)    </span><span style="color: #d0e0e3;">delete</span><span style="color: #ecf3e9;">[] ptr[m];}</span><span style="color: #d0e0e3;">delete</span> []ptr;</pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p&gt;一个机器人位于一个&amp;nbsp;&lt;em&gt;m x n&amp;nbsp;&lt;/em&gt;网格的左上角 （起始点在下图中标记为&amp;ldquo;Start&amp;rdquo; ）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Test Blog</title>
    <link href="http://yoursite.com/2019/03/27/Test-Blog/"/>
    <id>http://yoursite.com/2019/03/27/Test-Blog/</id>
    <published>2019-03-27T10:27:32.000Z</published>
    <updated>2019-03-27T10:40:18.883Z</updated>
    
    <content type="html"><![CDATA[<p>首先介绍一下ode45的格式：</p><blockquote><div class="code_responsive"><code class="synopsis">[t,y] = ode45(odefun,tspan,y0)</code></div><div class="code_responsive"><code class="synopsis">[t,y] = ode45(odefun,tspan,y0,options)</code></div><div class="code_responsive"><code class="synopsis">[t,y,te,ye,ie] = ode45(odefun,tspan,y0,options)</code></div><div class="code_responsive"><code class="synopsis">sol = ode45(<span class="argument_placeholder">___)</span></code></div></blockquote><p>这里介绍一阶微分方程：</p><blockquote><p>[自变量，因变量] = ode45(方程，范围，初值);</p></blockquote><p>&nbsp;</p><p>举个栗子：</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190326111054595-552540890.png" alt width="774" height="160"></p><p>&nbsp;</p><p>首先创建一个<strong>func2.m</strong>函数存放方程表达式</p><div class="cnblogs_Highlighter"><pre class="brush:matlab;gutter:true;">function Biubiu = func2(h, t)g = 9.8;Biubiu = (10000*pi/sqrt(2*g))*(h.^(3/2) - 2*(h.^(1/2)));end</pre></div><p>　　</p><p>接着在MATLAB命令窗口输入：</p><div class="cnblogs_Highlighter"><pre class="brush:matlab;gutter:true;">tspan = [1 0];%函数范围t_1 = 0;%初值[h,t] = ode45(@func2, hspan, t_1);plot(h,t);%绘图</pre></div><p>　　</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190326111749506-248585311.png" alt width="512" height="386"></p><p>&nbsp;</p><p>可以丰富一下图像，增加横坐标名，纵坐标名和标题</p><div class="cnblogs_Highlighter"><pre class="brush:matlab;gutter:true;">xlabel('h值')ylabel('y值')title('一阶微分方程')</pre></div><p>　　</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190326112238965-873344779.png" alt width="518" height="390"></p><p>&nbsp;</p><p><strong>相关资料访问</strong>：<a href="https://ww2.mathworks.cn/help/matlab/ref/ode45.html?s_tid=doc_ta" target="_blank">https://ww2.mathworks.cn/help/matlab/ref/ode45.html?s_tid=doc_ta</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先介绍一下ode45的格式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;code_responsive&quot;&gt;&lt;code class=&quot;synopsis&quot;&gt;[t,y] = ode45(odefun,tspan,y0)&lt;/code&gt;&lt;/div&gt;
&lt;div cla
      
    
    </summary>
    
      <category term="MATLAB" scheme="http://yoursite.com/categories/MATLAB/"/>
    
    
      <category term="ode45" scheme="http://yoursite.com/tags/ode45/"/>
    
  </entry>
  
  <entry>
    <title>Hello,Hk_Mayfly!</title>
    <link href="http://yoursite.com/2019/03/26/Hello-Hk-Mayfly/"/>
    <id>http://yoursite.com/2019/03/26/Hello-Hk-Mayfly/</id>
    <published>2019-03-26T07:54:42.000Z</published>
    <updated>2019-03-27T10:17:02.414Z</updated>
    
    <content type="html"><![CDATA[<p>Biubiubiu!!!博客完善期，等待上线!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Biubiubiu!!!博客完善期，等待上线!!!&lt;/p&gt;

      
    
    </summary>
    
      <category term="搭建GitHub博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
