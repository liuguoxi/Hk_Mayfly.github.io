<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hk_Mayfly Blog</title>
  
  <subtitle>不知道导致不确定，不确定导致决策瘫痪。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hkmayfly.com/"/>
  <updated>2019-04-08T15:57:49.343Z</updated>
  <id>http://hkmayfly.com/</id>
  
  <author>
    <name>Hk_Mayfly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>两种方法爬取网页图片(requests/urllib)</title>
    <link href="http://hkmayfly.com/2019/04/08/%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87-requests-urllib/"/>
    <id>http://hkmayfly.com/2019/04/08/两种方法爬取网页图片-requests-urllib/</id>
    <published>2019-04-08T14:24:34.000Z</published>
    <updated>2019-04-08T15:57:49.343Z</updated>
    
    <content type="html"><![CDATA[<p>实际上，简单的图片爬虫就三个步骤：</p><ol><li>获取网页代码</li><li>使用正则表达式，寻找图片链接</li><li>下载图片链接资源到电脑</li></ol><p>下面以博客园为例子，不同的网站可能需要更改正则表达式形式。</p><h3 id="requests版本："><a href="#requests版本：" class="headerlink" title="requests版本："></a>requests版本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">#网页代码</span><br><span class="line">r = requests.get(&apos;https://www.cnblogs.com/Mayfly-nymph/p/10663896.html&apos;)</span><br><span class="line"></span><br><span class="line">#则表达式，找寻图片链接</span><br><span class="line">listpic = re.findall(r&apos;http.+\.jpg&apos;,r.text)</span><br><span class="line">print(listpic)</span><br><span class="line">i = 1</span><br><span class="line">#循环获取每个图片链接的内容，以二进制形式输入到文件当中</span><br><span class="line">for url in listpic:</span><br><span class="line">    with open(&apos;D:\\pip\\&apos;+str(i)+&apos;.jpg&apos;, &apos;wb&apos;) as f:</span><br><span class="line">        image = requests.get(url)</span><br><span class="line">        f.write(image.content)</span><br><span class="line">        i+=1</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="urllib版本："><a href="#urllib版本：" class="headerlink" title="urllib版本："></a>urllib版本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">url = &apos;https://www.cnblogs.com/Mayfly-nymph/p/10663896.html&apos;</span><br><span class="line">#模拟浏览器发送GET请求</span><br><span class="line">r = request.Request(url)</span><br><span class="line">#对页面进行抓取</span><br><span class="line">with request.urlopen(r) as f:</span><br><span class="line">    data = f.read()</span><br><span class="line">#将bytes型数据转化为字符串</span><br><span class="line">data = str(data, encoding=&apos;utf-8&apos;)</span><br><span class="line">#以正则表达式找寻符合要求的图片链接</span><br><span class="line">listpic = re.findall(r&apos;http.+\.jpg&apos;, data)</span><br><span class="line">print(listpic)</span><br><span class="line">i = 1</span><br><span class="line">#循环，下载链接图片资源并保存</span><br><span class="line">for url in listpic:</span><br><span class="line">    request.urlretrieve(url,&apos;D:\\pip\\&apos;+str(i)+&apos;.jpg&apos;)</span><br><span class="line">    i+=1</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p>&nbsp;</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1vm3atee6j310l0if7d4.jpg" alt width="900" height="453"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实际上，简单的图片爬虫就三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取网页代码&lt;/li&gt;
&lt;li&gt;使用正则表达式，寻找图片链接&lt;/li&gt;
&lt;li&gt;下载图片链接资源到电脑&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面以博客园为例子，不同的网站可能需要更改正则表达式形式。&lt;/p&gt;

&lt;h3 i
      
    
    </summary>
    
    
      <category term="Python" scheme="http://hkmayfly.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://hkmayfly.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm+cmd中使用Anaconda 与 新建Python环境（Windows）</title>
    <link href="http://hkmayfly.com/2019/04/07/PyCharm-cmd%E4%B8%AD%E4%BD%BF%E7%94%A8Anaconda-%E4%B8%8E-%E6%96%B0%E5%BB%BAPython%E7%8E%AF%E5%A2%83%EF%BC%88Windows%EF%BC%89/"/>
    <id>http://hkmayfly.com/2019/04/07/PyCharm-cmd中使用Anaconda-与-新建Python环境（Windows）/</id>
    <published>2019-04-06T17:52:29.000Z</published>
    <updated>2019-04-06T18:01:55.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PyCharm配置Anaconda"><a href="#PyCharm配置Anaconda" class="headerlink" title="PyCharm配置Anaconda"></a>PyCharm配置Anaconda</h2><p><strong>Anaconda</strong>的安装在网上已经有了，这里主要讲之前已经安装了已经配置好Python环境变量以及PyCharm的情况下,使用<strong>Anaconda</strong>。</p><p>即在PyCharm中出现了<strong>&ldquo;<span style="color: #ff0000;">ModuleNotFoundError No module named 'requests'</span>&rdquo;</strong>错误</p><p>在已经配置好PyCharm的情况下,我们要使用<strong>Anaconda</strong>，需要将原来的编译器（删去），环境可以更换也可以就用原来的。</p><p>在PyCharm左上角<strong>File</strong>(文件)中点击<strong>setting</strong>(设置)==》选择<strong>Project</strong>(项目)==》<strong>Project Interpreter</strong>==》下拉菜单,点击<strong>show all...</strong>==》选定之前配置<strong>Python.exe</strong>,点右边的减号删除（由于我已经配置好了，所以在我这显示的是<strong>Anaconda</strong>的<strong>Python</strong>==》点击&lsquo;<strong>+</strong>&rsquo;号==》<strong>System</strong> <strong>Interpreter</strong>==》右边三个&lsquo;<strong>.</strong>&rsquo;==&gt;找到安装Anaconda的目录选择<strong>Python.exe</strong>==》确定，再返回我们的编译器，就能够引用<strong>requests</strong>等第三方模块了。（具体不懂参考下图）</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1teauizuqj30rz0andh7.jpg" alt width="783" height="298"></p><p>&nbsp;</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tec2q1voj30ia03g0ss.jpg" alt width="658" height="124"></p><p>&nbsp;</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tecm21kyj30ql0dhabn.jpg" alt width="769" height="390"></p><p>&nbsp;</p><h2 id="cmd中使用Anaconda"><a href="#cmd中使用Anaconda" class="headerlink" title="cmd中使用Anaconda"></a>cmd中使用Anaconda</h2><p>我们要在<strong>cmd</strong>中使用<strong>Anaconda</strong>，也是需要我们安装Anaconda文件夹中的<strong>Python.exe</strong>，因为我们之前已经配置的Python的环境，所以我们在控制不管怎么输入都是进入之前的编译器中，如果要修改需要到环境变量中更改，我认为没必要的。我们要在cmd中使用Anaconda,我们可以将它与之前安装的区分开。</p><p>直接在cmd中打开Anaconda文件夹中的Pyhton.exe就行。</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tengnlitj30cs07fdgm.jpg" alt width="460" height="267"></p><p>&nbsp;</p><h2 id="Python新环境创建"><a href="#Python新环境创建" class="headerlink" title="Python新环境创建"></a>Python新环境创建</h2><p>当然对于，Python的环境我们也可以利用<strong>virtualenv</strong>来创建一个新的环境</p> <h3 id="virtualenv模块下载"><a href="#virtualenv模块下载" class="headerlink" title="virtualenv模块下载"></a>virtualenv模块下载</h3><p>如果安装了Anaconda,可以直接使用<strong>virtualenv</strong>模块，没有就在cmd上运行（下面这部分为没有安装好Anaconda的准备）</p><div class="cnblogs_code"><pre><code class="ruby">pip3 install virtualenv</code></pre></div><p>上面的代码需要安装pip支持下载（不做说明）</p><p>&nbsp;</p><p>上面如果下载错误可以尝试换源：</p><div class="cnblogs_code"><pre>pip install virtualenv -i https:<span style="color: #008000;">//</span><span style="color: #008000;">pypi.tuna.tsinghua.edu.cn/simple/ </span></pre></div><p>&nbsp;</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>下载好之后，新建环境文件夹</p><p>&nbsp;</p><p>安装新的环境</p><div class="cnblogs_code"><pre>virtualenv --no-site-packages venv</pre></div><p>其中<strong>--no-site-packages</strong>是表示不从原来的Python环境中继承第三方库，你要一个干净的环境就加，不要就不加。</p><p>这样一来，我们的新环境就创建好了，Python编译器在Scripts文件夹中</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tf43klqmj30hk0h5dhj.jpg" alt width="596" height="582"></p><p>&nbsp;</p><p>这个新的环境你可以在PyCharm配置Anaconda时选择自己重新建一个干净的环境。</p><p>&nbsp;</p><p>进入/退出新环境</p><p>进入环境打开test_env/env/Scripts/activate文件即可进入该环境</p><p>输入deactivate退出环境</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tfvo2w63j30ik05hwfb.jpg" alt width="668" height="197"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PyCharm配置Anaconda&quot;&gt;&lt;a href=&quot;#PyCharm配置Anaconda&quot; class=&quot;headerlink&quot; title=&quot;PyCharm配置Anaconda&quot;&gt;&lt;/a&gt;PyCharm配置Anaconda&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;An
      
    
    </summary>
    
    
      <category term="Python" scheme="http://hkmayfly.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 100.相同的树（C++）</title>
    <link href="http://hkmayfly.com/2019/04/02/LeetCode-100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91%EF%BC%88C-%EF%BC%89/"/>
    <id>http://hkmayfly.com/2019/04/02/LeetCode-100-相同的树（C-）/</id>
    <published>2019-04-02T07:26:27.000Z</published>
    <updated>2019-04-02T07:26:59.430Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p><p></p><p></p><p>&nbsp;</p><p></p><p></p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><p></p><p></p><p>&nbsp;</p><p></p><p></p><p>示例 1:</p><p></p><p><pre>输入:       1         1<br>          / \       / \<br>         2   3     2   3</pre></p><pre><code>    [1,2,3],   [1,2,3]</code></pre><p>输出: true&lt;/pre&gt;</p><p></p><p>示例 2:</p><p></p><p><pre>输入:      1          1<br>          /           \<br>         2             2</pre></p><pre><code>    [1,2],     [1,null,2]</code></pre><p>输出: false&lt;/pre&gt;</p><p></p><p>输出: false</p><p></p><p></p><p>示例 3:</p><p></p><p><pre>输入:       1         1<br>          / \       / \<br>         2   1     1   2</pre></p><pre><code>    [1,2,1],   [1,1,2]</code></pre><p>输出: false&lt;/pre&gt;</p><p></p><p>输出: false</p><p></p><div class="cnblogs_code"><pre>/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */class<span> Solution {public<span>:    bool isSameTree(TreeNode* q, TreeNode*<span> p) {        if (!p &amp;&amp; !q) {//表示到子叶末尾都满足相等条件，返回true            return true<span>;        }        if(!q || !p) {//表示有一个子叶达到末端而另一个没有            return false<span>;        }        if (q-&gt;val != p-&gt;val) {//表示值不相等            return false<span>;        }        return isSameTree(q-&gt;left, p-&gt;left) &amp;&amp; isSameTree(q-&gt;right, p-&gt;<span>right);    }};</span></span></span></span></span></span></span></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p&gt;给定两个二叉树，编写一个函数来检验它们是否相同。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&amp;
      
    
    </summary>
    
    
      <category term="二叉树" scheme="http://hkmayfly.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="DFS" scheme="http://hkmayfly.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://hkmayfly.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 112.路径总和（C++）</title>
    <link href="http://hkmayfly.com/2019/04/02/LeetCode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-C/"/>
    <id>http://hkmayfly.com/2019/04/02/LeetCode-112-路径总和-C/</id>
    <published>2019-04-02T03:50:09.000Z</published>
    <updated>2019-04-02T03:52:20.984Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:&nbsp;<br>给定如下二叉树，以及目标和 sum = 22，</p><pre>             5             / \            4   8           /   / \          11  13  4         /  \      \        7    2      1</pre><p><br>返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。</p><p>&nbsp;</p><p>使用类似于二叉树遍历，将sum减去节点，若叶子节点末端值与sum值相等，则满足条件，返回true;</p><div class="cnblogs_code"><pre>/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */class<span> Solution {public<span>:    bool hasPathSum(TreeNode* root, int<span> sum) {        if (!<span>root) {            return false<span>;        }        if (root-&gt;left == NULL &amp;&amp; root-&gt;right ==<span> NULL) {            return root-&gt;val ==<span> sum;        }        return hasPathSum(root-&gt;left, sum - root-&gt;val) || hasPathSum(root-&gt;right, sum - root-&gt;<span>val);    }};</span></span></span></span></span></span></span></span></pre></div><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;示例:&amp;nbsp;&lt;br&gt;给定如下二叉树，以及目标和 sum = 22，&lt;/p&gt;
&lt;pre&gt;   
      
    
    </summary>
    
    
      <category term="二叉树" scheme="http://hkmayfly.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="DFS" scheme="http://hkmayfly.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://hkmayfly.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 257.二叉树所有路径（C++）</title>
    <link href="http://hkmayfly.com/2019/04/02/LeetCode%20257.%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84%EF%BC%88C++%EF%BC%89/"/>
    <id>http://hkmayfly.com/2019/04/02/LeetCode 257.二叉树所有路径（C++）/</id>
    <published>2019-04-02T03:39:32.000Z</published>
    <updated>2019-04-02T03:46:57.843Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p><p></p><p></p><p><b>说明:</b> 叶子节点是指没有子节点的节点。</p><p></p><p></p><p><b>示例:</b></p><p></p><p></p><p><b>输入:</b></p><p></p><p></p><p>&nbsp;</p><p></p><p><pre>   1 /   \2     3 \  5</pre></p><p></p><p><b>输出:</b> ["1-&gt;2-&gt;5", "1-&gt;3"]</p><p></p><p></p><p><b>解释:</b> 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</p><p></p><p></p><p>&nbsp;</p><p></p><div class="cnblogs_code"><pre>class<span> Solution {public<span>:    vector&lt;string&gt; binaryTreePaths(TreeNode*<span> root) {        if(root == NULL)//二叉树为空            return<span> vec;        DFS(root, to_string(root-&gt;<span>val));        return<span> vec;    }    void DFS(TreeNode* root, string<span> str) {        if (root-&gt;right == NULL &amp;&amp; root-&gt;left == NULL) {//搜索完一个叶子节点，将数据存入容器<span>            vec.push_back(str);            return<span>;        }        if(root-&gt;left != NULL)//防止越界取值                DFS(root-&gt;left, str + "-&gt;" + to_string(root-&gt;left-&gt;val));//先将左子叶遍历，使用str存储递归中经过的值        if(root-&gt;right !=<span> NULL)            DFS(root-&gt;right, str + "-&gt;" + to_string(root-&gt;right-&gt;<span>val));    }private<span>:    vector&lt;string&gt;<span> vec;};</span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>&nbsp;</p><p>　　</p><p>&nbsp;</p><p><strong>转载</strong>：这个会更好理解</p><div class="cnblogs_code"><pre>/*这个应该挺容易理解*/class<span> Solution {private<span>: vector&lt;string&gt; ans;// 最终的解答public<span>: vector&lt;string&gt; binaryTreePaths(TreeNode*<span> root) {    binaryTreePaths(root, "", true);// 递归求解    return<span> ans; }private<span>: void binaryTreePaths(TreeNode* root, string s, bool<span> isRoot) {    if (!root) return<span>;    s += (isRoot ? "" : "-&gt;") + to_string(root-&gt;val);//根节点需要特殊处理    if (!root-&gt;left &amp;&amp; !root-&gt;right) {// 如果找到一个叶子节点<span>        ans.push_back(s);        return<span>;    }    binaryTreePaths(root-&gt;left, s, false<span>);    binaryTreePaths(root-&gt;right, s, false<span>); }};</span></span></span></span></span></span></span></span></span></span></span></span></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p&gt;给定一个二叉树，返回所有从根节点到叶子节点的路径。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;说明:&lt;/b&gt; 叶子节点是指没有子节点的节点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;示例:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;
      
    
    </summary>
    
    
      <category term="二叉树" scheme="http://hkmayfly.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="DFS" scheme="http://hkmayfly.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://hkmayfly.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+hexo搭建个人博客</title>
    <link href="http://hkmayfly.com/2019/03/30/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E4%BA%BA%E6%90%AD%E5%BB%BA/"/>
    <id>http://hkmayfly.com/2019/03/30/GitHub+Hexo博客个人搭建/</id>
    <published>2019-03-30T07:35:33.000Z</published>
    <updated>2019-04-08T14:33:33.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="注册GitHub账号。"><a href="#注册GitHub账号。" class="headerlink" title="注册GitHub账号。"></a>注册GitHub账号。</h3><p>不做说明</p><p>&nbsp;</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建一个新的仓库来放置我们的文件。</p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta1ppyj9j308206ht8o.jpg"><p>&nbsp;</p><p>&nbsp;</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta4pff8hj30q70htq46.jpg" alt width="836" height="568"></p><p>&nbsp;</p>### 下载安装<strong>Node.js</strong><p><strong><a href="https://nodejs.org/en/" target="_blank">https://nodejs.org/en/</a>&nbsp; </strong>&nbsp;两个版本，选择右边那个最新版</p><p>&nbsp;</p><h3 id="下载安装git"><a href="#下载安装git" class="headerlink" title="下载安装git"></a>下载安装<strong>git</strong></h3><p><a href="https://www.git-scm.com/download/" target="_blank">https://www.git-scm.com/download/</a></p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta5d4vr9j30pl0by776.jpg" alt width="645" height="301"></p><p>&nbsp;</p><h3 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h3><p>打开你的cmd命令窗口</p><p>&nbsp;</p><p>检查<strong>Node.js</strong></p><blockquote><p>node -v</p><p>npm -v</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta5ukubfj307801o743.jpg" alt></p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta6k5y4gj306z01v0sj.jpg" alt></p><p>&nbsp;</p><p>检查<strong>git</strong></p><blockquote><p>git --version</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta6wgrtrj309501z3yh.jpg" alt></p><p>右键也可以看到你<strong>git bash</strong></p><p>&nbsp;</p><p>准备工作结束，开始搭建博客！</p><p>&nbsp;</p><h2 id="建立静态网站"><a href="#建立静态网站" class="headerlink" title="建立静态网站"></a>建立静态网站</h2><h3 id="创建存放博客文件的文件夹"><a href="#创建存放博客文件的文件夹" class="headerlink" title="创建存放博客文件的文件夹"></a>创建存放博客文件的文件夹</h3><p>在电脑上找个合适的地方，创建一个<strong>myblog</strong>文件夹，路径中别有中文，我的是在<strong>D:\myblog</strong></p><p>&nbsp;</p><p>从cmd中进入到myblog文件夹，当然你直接进到Blog文件夹右键 <strong>git bash here&nbsp;</strong>也可以，都是在Blog文件夹执行命令。</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta78v2r0j306h04ea9z.jpg" alt></p><p><span style="color: #ff0000;">（<strong>下面的一系列操作都是在myblog文件夹中进行的，cmd保持图片中打开的位置</strong>）</span></p><p>&nbsp;</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<strong>Hexo</strong></h3><p>输入命令</p><blockquote><p>npm install hexo -g</p></blockquote><p>&nbsp;</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>输入命令</p><blockquote><p>hexo -version</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta7jtm5oj30aq09pt8z.jpg" alt></p><p>&nbsp;</p><h3 id="初始化文件"><a href="#初始化文件" class="headerlink" title="初始化文件"></a>初始化文件</h3><p>输入命令</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta8q6e6dj30jc08m0u8.jpg" alt width="644" height="287"></p><p>实验室网差，等吧... 找个网好的地方...</p><p>现在实际上就是在往<strong>myblog</strong>文件夹装入hexo文件了，可以去文件夹看看。</p><p>&nbsp;</p><h3 id="安装完毕！"><a href="#安装完毕！" class="headerlink" title="安装完毕！"></a>安装完毕！</h3><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta91yumqj30hv066gmh.jpg" alt></p><p>&nbsp;</p><p>下面6,7不想看的直接输入命令</p><blockquote><p>hexo g&amp;&amp;hexo s</p></blockquote><p>&nbsp;</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>输入命令</p><blockquote><p>hexo generate</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1ta9msnjgj30cn065js9.jpg" alt></p><p>&nbsp;</p><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><p>输入命令</p><blockquote><p>hexo server</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1taa0vhhxj30g003swep.jpg" alt></p><p>如果开启失败，显示端口已经被用了，换一个即可。我的是因为做过一个网站了，这个是做教程弄的。</p><p>更换端口命令：</p><blockquote><p>hexo server -p 4444</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1taad2lxkj30dn02k748.jpg"> alt="" /></p><p>&nbsp;</p><p>Hexo已经在运行了，按两次<strong>Ctrl+C</strong>结束</p><p>&nbsp;</p><h3 id="搭建完成"><a href="#搭建完成" class="headerlink" title="搭建完成"></a>搭建完成</h3><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1taapitglj30jk0fwdid.jpg" alt width="569" height="462"></p><p>&nbsp;</p><p>现在我们仅仅是在本地测试完成，接下来要弄到GitHub仓库中，才能在网上访问</p><p>&nbsp;</p><h2 id="绑定仓库"><a href="#绑定仓库" class="headerlink" title="绑定仓库"></a>绑定仓库</h2><h3 id="下载powershell"><a href="#下载powershell" class="headerlink" title="下载powershell"></a>下载<strong>powershell</strong></h3><p><a href="https://www.mls-software.com/opensshd.html" target="_blank">https://www.mls-software.com/opensshd.html</a></p><p>按住<strong>Ctrl+shift+右键</strong>，如果出现&ldquo;<strong>此处打开powershell</strong>&rdquo;，那就不需要安装。</p><p>&nbsp;</p><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>输入命令</p><blockquote><p>ssh-keygen -t rsa</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tab15ak8j30nk0abjrf.jpg" alt width="729" height="319"></p><p>&nbsp;</p><p>输入命令后，一直回车就行，公钥放在上面powershell显示的文件夹中，我的是在：<strong>C:\Users\10245/.ssh/id_rsa.pub</strong></p><p>找到文件，打开复制。</p><p>&nbsp;</p><h3 id="创建ssh公钥"><a href="#创建ssh公钥" class="headerlink" title="创建ssh公钥"></a>创建ssh公钥</h3><p>在GitHub打开</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tabmntvzj307v0crt8v.jpg" alt width="194" height="315"></p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tadrojrij30uz0axt9d.jpg" alt width="766" height="270"></p><p>&nbsp;</p><p>输入公钥，增加SSH KEY</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tae6m32qj30vr0ezwfj.jpg" alt width="814" height="384"></p><p>&nbsp;</p><p>顺便去仓库，把仓库的ssh地址，复制了</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1taen9yzyj30tu0eh75b.jpg" alt width="728" height="353"></p><p>&nbsp;</p><h3 id="配置deployment"><a href="#配置deployment" class="headerlink" title="配置deployment"></a>配置deployment</h3><p>打开，根目录下（myblog中）的<strong>_config.ymlm</strong>，拉到最下面，找到deploy,配置为下图：（注意冒号后面都有一个空格）</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1taeziis5j30g205d74k.jpg" alt></p><p>&nbsp;</p><h3 id="打开powershell检验（cmd和git都可以）"><a href="#打开powershell检验（cmd和git都可以）" class="headerlink" title="打开powershell检验（cmd和git都可以）"></a>打开powershell检验（cmd和git都可以）</h3><p>使用powershell打开myblog文件夹</p><p>输入命令，测试连接</p><blockquote><p>ssh -T git@github.com</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tafla9pnj30kj0143ya.jpg" alt></p><p>出现这种，带有&ldquo;hi 用户名&rdquo;的才是成功。</p><p>&nbsp;</p><p>****在上传静态文件之前，你可以创建第一篇自己的博客。</p><p>cmd打开myblog,输入命令</p><blockquote><p>hexo new post &ldquo;博客名&rdquo;</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tafxeb58j30ho028t8q.jpg" alt></p><p>文件路径，也就是紫色文字，</p><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tag9bzgpj30f109ggmj.jpg" alt width="477" height="300"></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="上传静态文件"><a href="#上传静态文件" class="headerlink" title="上传静态文件"></a>上传静态文件</h3><p>在cmd中打开myblog,执行命令</p><blockquote><p>npm install --save hexo-deployer-git</p></blockquote><p>输入命令</p><blockquote><p>hexo g -d</p></blockquote><p>&nbsp;</p><h3 id="访问博客"><a href="#访问博客" class="headerlink" title="访问博客"></a>访问博客</h3><p><img src="http://ww1.sinaimg.cn/large/007EVkFtgy1g1tagmsgqnj30n60d1gof.jpg" alt width="681" height="383"></p><p>上传完成之后，就可以访问我们网上的博客了。我的地址是：<strong>https://mayflyhk.github.io/</strong></p><p>你的博客地址，参照<strong> https://用户名.github.io/</strong> 填写</p><p>&nbsp;</p><p>gulp的优化方法记录在了这里：<a href="https://www.cnblogs.com/Mayfly-nymph/p/10623234.html" target="_blank">https://www.cnblogs.com/Mayfly-nymph/p/10623234.html</a></p><p>&nbsp;</p><p>其他博客美化教程，抽时间会继续添加。</p><p>&nbsp;</p><p><span style="font-size: 16px;">有什么问题，欢迎加我联系方式询问，喜欢的小伙伴可以关注一波！！！</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;h3 id=&quot;注册GitHub账号。&quot;&gt;&lt;a href=&quot;#注册GitHub账号。&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="blog" scheme="http://hkmayfly.com/categories/blog/"/>
    
    
      <category term="博客建设" scheme="http://hkmayfly.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
</feed>
