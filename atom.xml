<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hk_Mayfly Blog</title>
  
  <subtitle>不知道导致不确定，不确定导致决策瘫痪。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hkmayfly.com/"/>
  <updated>2019-04-02T03:52:20.984Z</updated>
  <id>http://hkmayfly.com/</id>
  
  <author>
    <name>Hk_Mayfly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 112.路径总和（C++）</title>
    <link href="http://hkmayfly.com/2019/04/02/LeetCode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-C/"/>
    <id>http://hkmayfly.com/2019/04/02/LeetCode-112-路径总和-C/</id>
    <published>2019-04-02T03:50:09.000Z</published>
    <updated>2019-04-02T03:52:20.984Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:&nbsp;<br>给定如下二叉树，以及目标和 sum = 22，</p><pre>             5             / \            4   8           /   / \          11  13  4         /  \      \        7    2      1</pre><p><br>返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。</p><p>&nbsp;</p><p>使用类似于二叉树遍历，将sum减去节点，若叶子节点末端值与sum值相等，则满足条件，返回true;</p><div class="cnblogs_code"><pre>/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */class<span> Solution {public<span>:    bool hasPathSum(TreeNode* root, int<span> sum) {        if (!<span>root) {            return false<span>;        }        if (root-&gt;left == NULL &amp;&amp; root-&gt;right ==<span> NULL) {            return root-&gt;val ==<span> sum;        }        return hasPathSum(root-&gt;left, sum - root-&gt;val) || hasPathSum(root-&gt;right, sum - root-&gt;<span>val);    }};</span></span></span></span></span></span></span></span></pre></div><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;示例:&amp;nbsp;&lt;br&gt;给定如下二叉树，以及目标和 sum = 22，&lt;/p&gt;
&lt;pre&gt;   
      
    
    </summary>
    
    
      <category term="二叉树" scheme="http://hkmayfly.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="DFS" scheme="http://hkmayfly.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://hkmayfly.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 257.二叉树所有路径（C++）</title>
    <link href="http://hkmayfly.com/2019/04/02/LeetCode%20257.%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84%EF%BC%88C++%EF%BC%89/"/>
    <id>http://hkmayfly.com/2019/04/02/LeetCode 257.二叉树所有路径（C++）/</id>
    <published>2019-04-02T03:39:32.000Z</published>
    <updated>2019-04-02T03:46:57.843Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p><p></p><p></p><p><b>说明:</b> 叶子节点是指没有子节点的节点。</p><p></p><p></p><p><b>示例:</b></p><p></p><p></p><p><b>输入:</b></p><p></p><p></p><p>&nbsp;</p><p></p><p><pre>   1 /   \2     3 \  5</pre></p><p></p><p><b>输出:</b> ["1-&gt;2-&gt;5", "1-&gt;3"]</p><p></p><p></p><p><b>解释:</b> 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</p><p></p><p></p><p>&nbsp;</p><p></p><div class="cnblogs_code"><pre>class<span> Solution {public<span>:    vector&lt;string&gt; binaryTreePaths(TreeNode*<span> root) {        if(root == NULL)//二叉树为空            return<span> vec;        DFS(root, to_string(root-&gt;<span>val));        return<span> vec;    }    void DFS(TreeNode* root, string<span> str) {        if (root-&gt;right == NULL &amp;&amp; root-&gt;left == NULL) {//搜索完一个叶子节点，将数据存入容器<span>            vec.push_back(str);            return<span>;        }        if(root-&gt;left != NULL)//防止越界取值                DFS(root-&gt;left, str + "-&gt;" + to_string(root-&gt;left-&gt;val));//先将左子叶遍历，使用str存储递归中经过的值        if(root-&gt;right !=<span> NULL)            DFS(root-&gt;right, str + "-&gt;" + to_string(root-&gt;right-&gt;<span>val));    }private<span>:    vector&lt;string&gt;<span> vec;};</span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>&nbsp;</p><p>　　</p><p>&nbsp;</p><p><strong>转载</strong>：这个会更好理解</p><div class="cnblogs_code"><pre>/*这个应该挺容易理解*/class<span> Solution {private<span>: vector&lt;string&gt; ans;// 最终的解答public<span>: vector&lt;string&gt; binaryTreePaths(TreeNode*<span> root) {    binaryTreePaths(root, "", true);// 递归求解    return<span> ans; }private<span>: void binaryTreePaths(TreeNode* root, string s, bool<span> isRoot) {    if (!root) return<span>;    s += (isRoot ? "" : "-&gt;") + to_string(root-&gt;val);//根节点需要特殊处理    if (!root-&gt;left &amp;&amp; !root-&gt;right) {// 如果找到一个叶子节点<span>        ans.push_back(s);        return<span>;    }    binaryTreePaths(root-&gt;left, s, false<span>);    binaryTreePaths(root-&gt;right, s, false<span>); }};</span></span></span></span></span></span></span></span></span></span></span></span></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p&gt;给定一个二叉树，返回所有从根节点到叶子节点的路径。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;说明:&lt;/b&gt; 叶子节点是指没有子节点的节点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;示例:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;
      
    
    </summary>
    
    
      <category term="二叉树" scheme="http://hkmayfly.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="DFS" scheme="http://hkmayfly.com/tags/DFS/"/>
    
      <category term="LeetCode" scheme="http://hkmayfly.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+hexo搭建个人博客</title>
    <link href="http://hkmayfly.com/2019/03/30/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E4%BA%BA%E6%90%AD%E5%BB%BA/"/>
    <id>http://hkmayfly.com/2019/03/30/GitHub+Hexo博客个人搭建/</id>
    <published>2019-03-30T07:35:33.000Z</published>
    <updated>2019-04-01T14:18:42.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="注册GitHub账号。"><a href="#注册GitHub账号。" class="headerlink" title="注册GitHub账号。"></a>注册GitHub账号。</h3><p>不做说明</p><p>&nbsp;</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建一个新的仓库来放置我们的文件。</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330121435317-864630233.png" alt></p><p>&nbsp;</p><p>&nbsp;</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330121718198-548317285.png" alt width="836" height="568"></p><p>&nbsp;</p><h3 id="下载安装Node-js"><a href="#下载安装Node-js" class="headerlink" title="下载安装Node.js"></a>下载安装<strong>Node.js</strong></h3><p><strong><a href="https://nodejs.org/en/" target="_blank">https://nodejs.org/en/</a>&nbsp; </strong>&nbsp;两个版本，选择右边那个最新版</p><p>&nbsp;</p><h3 id="下载安装git"><a href="#下载安装git" class="headerlink" title="下载安装git"></a>下载安装<strong>git</strong></h3><p><a href="https://www.git-scm.com/download/" target="_blank">https://www.git-scm.com/download/</a></p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330122511379-53657400.png" alt width="645" height="301"></p><p>&nbsp;</p><h3 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h3><p>打开你的cmd命令窗口</p><p>&nbsp;</p><p>检查<strong>Node.js</strong></p><blockquote><p>node -v</p><p>npm -v</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330123044294-674015998.png" alt></p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330123052156-1604709110.png" alt></p><p>&nbsp;</p><p>检查<strong>git</strong></p><blockquote><p>git --version</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330123133445-1048488957.png" alt></p><p>右键也可以看到你<strong>git bash</strong></p><p>&nbsp;</p><p>准备工作结束，开始搭建博客！</p><p>&nbsp;</p><h2 id="建立静态网站"><a href="#建立静态网站" class="headerlink" title="建立静态网站"></a>建立静态网站</h2><h3 id="创建存放博客文件的文件夹"><a href="#创建存放博客文件的文件夹" class="headerlink" title="创建存放博客文件的文件夹"></a>创建存放博客文件的文件夹</h3><p>在电脑上找个合适的地方，创建一个<strong>myblog</strong>文件夹，路径中别有中文，我的是在<strong>D:\myblog</strong></p><p>&nbsp;</p><p>从cmd中进入到myblog文件夹，当然你直接进到Blog文件夹右键 <strong>git bash here&nbsp;</strong>也可以，都是在Blog文件夹执行命令。</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330124419574-1425518519.png" alt></p><p><span style="color: #ff0000;">（<strong>下面的一系列操作都是在myblog文件夹中进行的，cmd保持图片中打开的位置</strong>）</span></p><p>&nbsp;</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<strong>Hexo</strong></h3><p>输入命令</p><blockquote><p>npm install hexo -g</p></blockquote><p>&nbsp;</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>输入命令</p><blockquote><p>hexo -version</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330124747652-261808776.png" alt></p><p>&nbsp;</p><h3 id="初始化文件"><a href="#初始化文件" class="headerlink" title="初始化文件"></a>初始化文件</h3><p>输入命令</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330125413883-1785913510.png" alt width="644" height="287"></p><p>实验室网差，等吧... 找个网好的地方...</p><p>现在实际上就是在往<strong>myblog</strong>文件夹装入hexo文件了，可以去文件夹看看。</p><p>&nbsp;</p><h3 id="安装完毕！"><a href="#安装完毕！" class="headerlink" title="安装完毕！"></a>安装完毕！</h3><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330125651217-705075009.png" alt></p><p>&nbsp;</p><p>下面6,7不想看的直接输入命令</p><blockquote><p>hexo g&amp;&amp;hexo s</p></blockquote><p>&nbsp;</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>输入命令</p><blockquote><p>hexo generate</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330130048917-1911366107.png" alt></p><p>&nbsp;</p><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><p>输入命令</p><blockquote><p>hexo server</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330130718104-118103780.png" alt></p><p>如果开启失败，显示端口已经被用了，换一个即可。我的是因为做过一个网站了，这个是做教程弄的。</p><p>更换端口命令：</p><blockquote><p>hexo server -p 4444</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330130953645-1207893351.png" alt></p><p>&nbsp;</p><p>Hexo已经在运行了，按两次<strong>Ctrl+C</strong>结束</p><p>&nbsp;</p><h3 id="搭建完成"><a href="#搭建完成" class="headerlink" title="搭建完成"></a>搭建完成</h3><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330131130358-2103898507.png" alt width="569" height="462"></p><p>&nbsp;</p><p>现在我们仅仅是在本地测试完成，接下来要弄到GitHub仓库中，才能在网上访问</p><p>&nbsp;</p><h2 id="绑定仓库"><a href="#绑定仓库" class="headerlink" title="绑定仓库"></a>绑定仓库</h2><h3 id="下载powershell"><a href="#下载powershell" class="headerlink" title="下载powershell"></a>下载<strong>powershell</strong></h3><p><a href="https://www.mls-software.com/opensshd.html" target="_blank">https://www.mls-software.com/opensshd.html</a></p><p>按住<strong>Ctrl+shift+右键</strong>，如果出现&ldquo;<strong>此处打开powershell</strong>&rdquo;，那就不需要安装。</p><p>&nbsp;</p><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>输入命令</p><blockquote><p>ssh-keygen -t rsa</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330134357267-1948087292.png" alt width="729" height="319"></p><p>&nbsp;</p><p>输入命令后，一直回车就行，公钥放在上面powershell显示的文件夹中，我的是在：<strong>C:\Users\10245/.ssh/id_rsa.pub</strong></p><p>找到文件，打开复制。</p><p>&nbsp;</p><h3 id="创建ssh公钥"><a href="#创建ssh公钥" class="headerlink" title="创建ssh公钥"></a>创建ssh公钥</h3><p>在GitHub打开</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330135428780-1366793887.png" alt width="194" height="315"></p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330135445009-527794498.png" alt width="766" height="270"></p><p>&nbsp;</p><p>输入公钥，增加SSH KEY</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330135506414-976412101.png" alt width="814" height="384"></p><p>&nbsp;</p><p>顺便去仓库，把仓库的ssh地址，复制了</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330140358290-1963584022.png" alt width="728" height="353"></p><p>&nbsp;</p><h3 id="配置deployment"><a href="#配置deployment" class="headerlink" title="配置deployment"></a>配置deployment</h3><p>打开，根目录下（myblog中）的<strong>_config.ymlm</strong>，拉到最下面，找到deploy,配置为下图：（注意冒号后面都有一个空格）</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330140620430-664958308.png" alt></p><p>&nbsp;</p><h3 id="打开powershell检验（cmd和git都可以）"><a href="#打开powershell检验（cmd和git都可以）" class="headerlink" title="打开powershell检验（cmd和git都可以）"></a>打开powershell检验（cmd和git都可以）</h3><p>使用powershell打开myblog文件夹</p><p>输入命令，测试连接</p><blockquote><p>ssh -T git@github.com</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330133453711-511221129.png" alt></p><p>出现这种，带有&ldquo;hi 用户名&rdquo;的才是成功。</p><p>&nbsp;</p><p>****在上传静态文件之前，你可以创建第一篇自己的博客。</p><p>cmd打开myblog,输入命令</p><blockquote><p>hexo new post &ldquo;博客名&rdquo;</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330151245943-1778612670.png" alt></p><p>文件路径，也就是紫色文字，</p><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330151519320-2078641740.png" alt width="477" height="300"></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="上传静态文件"><a href="#上传静态文件" class="headerlink" title="上传静态文件"></a>上传静态文件</h3><p>在cmd中打开myblog,执行命令</p><blockquote><p>npm install --save hexo-deployer-git</p></blockquote><p>输入命令</p><blockquote><p>hexo g -d</p></blockquote><p>&nbsp;</p><h3 id="访问博客"><a href="#访问博客" class="headerlink" title="访问博客"></a>访问博客</h3><p><img src="https://img2018.cnblogs.com/blog/1228809/201903/1228809-20190330151943383-16502294.png" alt width="681" height="383"></p><p>上传完成之后，就可以访问我们网上的博客了。我的地址是：<strong>https://mayflyhk.github.io/</strong></p><p>你的博客地址，参照<strong> https://用户名.github.io/</strong> 填写</p><p>&nbsp;</p><p>gulp的优化方法记录在了这里：<a href="https://www.cnblogs.com/Mayfly-nymph/p/10623234.html" target="_blank">https://www.cnblogs.com/Mayfly-nymph/p/10623234.html</a></p><p>&nbsp;</p><p>其他博客美化教程，抽时间会继续添加。</p><p>&nbsp;</p><p><span style="font-size: 16px;">有什么问题，欢迎加我联系方式询问，喜欢的小伙伴可以关注一波！！！</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;h3 id=&quot;注册GitHub账号。&quot;&gt;&lt;a href=&quot;#注册GitHub账号。&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="blog" scheme="http://hkmayfly.com/categories/blog/"/>
    
    
      <category term="博客建设" scheme="http://hkmayfly.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
</feed>
