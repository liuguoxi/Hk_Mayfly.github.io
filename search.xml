<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[BUUCTF--不一样的flag]]></title>
    <url>%2F2019%2F09%2F17%2FBUUCTF-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag%2F</url>
    <content type="text"><![CDATA[测试文件：https://buuoj.cn/files/91b89e765c9aff8e82690c0868975b37/0bf39b5d-5f2f-4095-a921-fb5c20f53f21.zip?token=eyJ0ZWFtX2lkIjpudWxsLCJ1c2VyX2lkIjoxOTAzLCJmaWxlX2lkIjoxNDl9.XXmYkQ.5edzFDlCw_3UHmzs0yvtlqN2pqk &nbsp; 1.准备 获取信息 + 32位文件 &nbsp; 2.IDA打开将main函数反编译为C语言代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v3; // [esp+17h] [ebp-35h] int v4; // [esp+30h] [ebp-1Ch] int v5; // [esp+34h] [ebp-18h] signed int v6; // [esp+38h] [ebp-14h] int i; // [esp+3Ch] [ebp-10h] int v8; // [esp+40h] [ebp-Ch] __main(); v4 = 0; v5 = 0; qmemcpy(&amp;v3, _data_start__, 0x19u); while ( 1 ) &#123; puts("you can choose one action to execute"); puts("1 up"); puts("2 down"); puts("3 left"); printf("4 right\n:"); scanf("%d", &amp;v6); if ( v6 == 2 ) &#123; ++v4; &#125; else if ( v6 &gt; 2 ) &#123; if ( v6 == 3 ) &#123; --v5; &#125; else &#123; if ( v6 != 4 ) LABEL_13: exit(1); ++v5; &#125; &#125; else &#123; if ( v6 != 1 ) goto LABEL_13; --v4; &#125; for ( i = 0; i &lt;= 1; ++i ) &#123; if ( *(&amp;v4 + i) &lt; 0 || *(&amp;v4 + i) &gt; 4 ) exit(1); &#125; if ( *((_BYTE *)&amp;v8 + 5 * v4 + v5 - 41) == '1' ) exit(1); if ( *((_BYTE *)&amp;v8 + 5 * v4 + v5 - 41) == '#' ) &#123; puts("\nok, the order you enter is the flag!"); exit(0); &#125; &#125; &#125; &nbsp; 3.代码分析查看第13行代码中的_data_start__&nbsp; 1.data:00402000 __data_start__ db &apos;*11110100001010000101111#&apos;,0 &nbsp; 通过第51行5 * v4，这是一个5行5列的迷宫（一共25个字符） *1111 01000 01010 00010 1111# &nbsp; 从*走到#即可 &nbsp; 4.get flag！ flag{222441144222}]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyCharm+cmd中使用Anaconda 与 新建Python环境（Windows）]]></title>
    <url>%2F2019%2F04%2F07%2FPyCharm-cmd%E4%B8%AD%E4%BD%BF%E7%94%A8Anaconda-%E4%B8%8E-%E6%96%B0%E5%BB%BAPython%E7%8E%AF%E5%A2%83%EF%BC%88Windows%EF%BC%89%2F</url>
    <content type="text"><![CDATA[PyCharm配置AnacondaAnaconda的安装在网上已经有了，这里主要讲之前已经安装了已经配置好Python环境变量以及PyCharm的情况下,使用Anaconda。 即在PyCharm中出现了&ldquo;ModuleNotFoundError No module named 'requests'&rdquo;错误 在已经配置好PyCharm的情况下,我们要使用Anaconda，需要将原来的编译器（删去），环境可以更换也可以就用原来的。 在PyCharm左上角File(文件)中点击setting(设置)==》选择Project(项目)==》Project Interpreter==》下拉菜单,点击show all...==》选定之前配置Python.exe,点右边的减号删除（由于我已经配置好了，所以在我这显示的是Anaconda的Python==》点击&lsquo;+&rsquo;号==》System Interpreter==》右边三个&lsquo;.&rsquo;==&gt;找到安装Anaconda的目录选择Python.exe==》确定，再返回我们的编译器，就能够引用requests等第三方模块了。（具体不懂参考下图） &nbsp; &nbsp; &nbsp; cmd中使用Anaconda我们要在cmd中使用Anaconda，也是需要我们安装Anaconda文件夹中的Python.exe，因为我们之前已经配置的Python的环境，所以我们在控制不管怎么输入都是进入之前的编译器中，如果要修改需要到环境变量中更改，我认为没必要的。我们要在cmd中使用Anaconda,我们可以将它与之前安装的区分开。 直接在cmd中打开Anaconda文件夹中的Pyhton.exe就行。 &nbsp; Python新环境创建当然对于，Python的环境我们也可以利用virtualenv来创建一个新的环境 virtualenv模块下载如果安装了Anaconda,可以直接使用virtualenv模块，没有就在cmd上运行（下面这部分为没有安装好Anaconda的准备） pip3 install virtualenv 上面的代码需要安装pip支持下载（不做说明） &nbsp; 上面如果下载错误可以尝试换源： pip install virtualenv -i https://pypi.tuna.tsinghua.edu.cn/simple/ &nbsp; 环境搭建下载好之后，新建环境文件夹 &nbsp; 安装新的环境 virtualenv --no-site-packages venv 其中--no-site-packages是表示不从原来的Python环境中继承第三方库，你要一个干净的环境就加，不要就不加。 这样一来，我们的新环境就创建好了，Python编译器在Scripts文件夹中 &nbsp; 这个新的环境你可以在PyCharm配置Anaconda时选择自己重新建一个干净的环境。 &nbsp; 进入/退出新环境 进入环境打开test_env/env/Scripts/activate文件即可进入该环境 输入deactivate退出环境]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+hexo搭建个人博客]]></title>
    <url>%2F2019%2F03%2F30%2FGitHub%2BHexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E4%BA%BA%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[前期准备注册GitHub账号。不做说明 &nbsp; 创建仓库创建一个新的仓库来放置我们的文件。 &nbsp; &nbsp; &nbsp; 下载安装Node.jshttps://nodejs.org/en/&nbsp; &nbsp;两个版本，选择右边那个最新版 &nbsp; 下载安装githttps://www.git-scm.com/download/ &nbsp; 检查安装打开你的cmd命令窗口 &nbsp; 检查Node.js node -v npm -v &nbsp; 检查git git --version 右键也可以看到你git bash &nbsp; 准备工作结束，开始搭建博客！ &nbsp; 建立静态网站创建存放博客文件的文件夹在电脑上找个合适的地方，创建一个myblog文件夹，路径中别有中文，我的是在D:\myblog &nbsp; 从cmd中进入到myblog文件夹，当然你直接进到Blog文件夹右键 git bash here&nbsp;也可以，都是在Blog文件夹执行命令。 （下面的一系列操作都是在myblog文件夹中进行的，cmd保持图片中打开的位置） &nbsp; 安装Hexo输入命令 npm install hexo -g &nbsp; 检查输入命令 hexo -version &nbsp; 初始化文件输入命令 实验室网差，等吧... 找个网好的地方... 现在实际上就是在往myblog文件夹装入hexo文件了，可以去文件夹看看。 &nbsp; 安装完毕！ &nbsp; 下面6,7不想看的直接输入命令 hexo g&amp;&amp;hexo s &nbsp; 生成静态文件输入命令 hexo generate &nbsp; 开启服务输入命令 hexo server 如果开启失败，显示端口已经被用了，换一个即可。我的是因为做过一个网站了，这个是做教程弄的。 更换端口命令： hexo server -p 4444 &nbsp; Hexo已经在运行了，按两次Ctrl+C结束 &nbsp; 搭建完成 &nbsp; 现在我们仅仅是在本地测试完成，接下来要弄到GitHub仓库中，才能在网上访问 &nbsp; 绑定仓库下载powershellhttps://www.mls-software.com/opensshd.html 按住Ctrl+shift+右键，如果出现&ldquo;此处打开powershell&rdquo;，那就不需要安装。 &nbsp; 生成公钥输入命令 ssh-keygen -t rsa &nbsp; 输入命令后，一直回车就行，公钥放在上面powershell显示的文件夹中，我的是在：C:\Users\10245/.ssh/id_rsa.pub 找到文件，打开复制。 &nbsp; 创建ssh公钥在GitHub打开 &nbsp; 输入公钥，增加SSH KEY &nbsp; 顺便去仓库，把仓库的ssh地址，复制了 &nbsp; 配置deployment打开，根目录下（myblog中）的_config.ymlm，拉到最下面，找到deploy,配置为下图：（注意冒号后面都有一个空格） &nbsp; 打开powershell检验（cmd和git都可以）使用powershell打开myblog文件夹 输入命令，测试连接 ssh -T git@github.com 出现这种，带有&ldquo;hi 用户名&rdquo;的才是成功。 &nbsp; ****在上传静态文件之前，你可以创建第一篇自己的博客。 cmd打开myblog,输入命令 hexo new post &ldquo;博客名&rdquo; 文件路径，也就是紫色文字， &nbsp; &nbsp; 上传静态文件在cmd中打开myblog,执行命令 npm install --save hexo-deployer-git 输入命令 hexo g -d &nbsp; 访问博客 上传完成之后，就可以访问我们网上的博客了。我的地址是：https://mayflyhk.github.io/ 你的博客地址，参照 https://用户名.github.io/ 填写 &nbsp; gulp的优化方法记录在了这里：https://www.cnblogs.com/Mayfly-nymph/p/10623234.html &nbsp; 其他博客美化教程，抽时间会继续添加。 &nbsp; 有什么问题，欢迎加我联系方式询问，喜欢的小伙伴可以关注一波！！！]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>博客建设</tag>
      </tags>
  </entry>
</search>
